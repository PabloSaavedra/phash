using System;
using System.Linq;
using Xunit;

namespace Shipwreck.Phash.Data
{
    public class SqlFunctionFactoryTest
    {
        [Fact]
        public void TestMethod1()
        {
            const string FUNC = "dbo.__test";
            using (var db = new SqlDbContext())
            {
                db.Database.CreateIfNotExists();

                db.Database.ExecuteSqlCommand(SqlFunctionFactory.GetDropIfExistsFunctionSql(FUNC));

                try
                {
                    db.Database.ExecuteSqlCommand(SqlFunctionFactory.GetCreateFunctionSql(FUNC));

                    var hashes = new[] {
                    "A7FF81006AE3B5B5A4CC7FA79C97C0B0A397A59FBD9EA2B49FA1B3A7A2A9A1AFAAA1ACA79EA2AAB0",
                    "B580E2FF00B23BD29EB7A482B9C1CEB59FB1B3A7BFC3B9BFADA9ABAEC8C1AEB0B8B4B5B5B8BEB7AE",
                    "79A3FF370081649E84439794756C699383717A70777D7A8278777F766E757A817375827B7578757B",
                    "B85600FF84FA8D85D0B0D8C8C39EBEC4B3E195C4BFB4DA9BBCB9B4C9A5C4B3B6C7A7C1B9B6BFB1B6",
                    "77FF031600636F96753697867B8B8C767A7C84777362708570647C797C777184847475777A7D7973",
                    "A79D00DD7A0F64FF85A2A19968E3959DACA6BE96B4B48F9DBBAF9897B5B1A2A6A1A1AAA8ABB19EA5",
                    "99C4C100A1DA9F6DFFBF767A94C2928C94C27B989AA18C7DAB96788BA9AA878992B08DA492AF878F",
                    "A38B009117E07A9BBD4D8FFF5D54E0C691A8A2B7AE9DADABAE9D7CB2B79B9AA5AA9B9C9F9CA7989F",
                    "8BFE005F771923AAEFEAC86ABAACDF5067A04B44D8D1975A739A75609DB69F8FA499797A9389926E",
                    "D9E1CDD900D0DFDBFFD3F0DBFDD4D1B9E2D6CED7D5DDD5D5D6E1CCCAD8D7DCDBDDE0CDCFC9E0CDE4",
                    "6F1C0081676FFFA9A76186555563877A766257606579837966625E74707581716F6B6A6F6F727873",
                    "8F00792B9BFF9AD7AD6AABAD8E7CA79C999F7E9F8A998F8C8E9897899386968E89928D90908F8A8E",
                    "ABDE810078F2FF7CDABA75B4A0FB72E78E93D679B2EF9985D899B788BCD38CAD9DAF9689B5C688B4",
                    "AEDD004CFFC0AAE1BC71A3C794AFBDB3ABA4A9B1B3BBB0BDAA9EADB3AAB8B2B0ADA6ADAEB1B3AFB5",
                    "98AE3AFF001AC041641B847C97AACCAABC675D7571836E8E79A9AFA16AA3A8A296BABA9CBFC79DA3",
                    "8000FF53659F268F4E745D666491377E69745B666D893186646C5B6E667839836664678375975B96",
                    "88FFCCD169005B5848C7D44A85983E92BA758C936C7E90857B83BA896F7A748E9E86948973808993",
                    "8CA8FFD7847A2D4094D4EB387FABA580C0A13855B7B10086C1A9925BD8BC877249A56A6991B68E8B",
                    "DEE400BD5EE7E4F4FFEFE1BFECEEDBE1D9D1E0DFDAE8D2D9DEDDE9D8E3DDD7E3DEE1DFDADBDFDADF",
                    "7537FFD4E800134E1D874B7A75795C6C3E6B5848706279767E9C8679817083738383657E6477696A",
                    "93BB53FF12001E6916BD79A2C37052C4908FBFA1678AB76A9FBF9270B18472B09F87A4A4818D9A94",
                    "93FF00C542F0596C96619673735C6B7E8B746B7C6D9A7583747D918E807C8A8E959A8699899D8F99",
                    "4E3F6FFFD90089799A1D3B488D3F48344447563D574A454446575C49435B4D414A5B4F484553574D",
                    "ACFF68007CECB9C0A0D18BAB99AECBA0999DBBAFAD9ABCB698ACBDADA3A5B0BCA3A1B6AAA4A5AFBB",
                    "BE81FFEF00BC31E6A3C59395BFCAD8B8A7BCB3B8C6C5CAC4B0B6ADC6CEBDBFBABCC9BAB7CAC5BBB9",
                    "7AA9FF2F008465A586409A96786C6B97816C79757C7E7A82787580776F787E817477857B7478767E",
                    "B64D00F986FF8687D3AFDBC5BC9BC4BCB5DC8ECCB6B7D390BFB6B3C2A7C2AEB9BBA9C3AFB8BBACB7",
                    "7EFF002101667A9963449D7E8A977F8C887B8F806A777B8176737C7E84797C9285787E7E8985747C",
                    "A19200DD630E60FF8295A18C64E58298AB9CBC91B4A8889EB5A39398B2AA9D9E9B9FA4A5A1AC9A9E",
                    "9BC9C6009CD9A377FFAE7F7795BE9A8B98C07A9594A5917EA68F8691B2A18D8A9EAE96A396AD849C",
                    "AB8200962DE567ACC157A3FF625EE2D495A9C4BB9AAABDABB6A187C0B99CA2B5AE9BA3ABAD9FA5B7",
                    "86FF092F790025BDEBDBD9498EB2C73370865365D6D6994A84935961A7BD9F88839465708D949E62",
                    "D3DDE3D200CCDAD2FCD4DFD9FFBCC0C0DFC6D2CDCCD4D1D2CCD7C9C6D2D9D8D4DDD0C5CCCEDCD6DC",
                    "843A009B7F9AFFC7C46C916B6F7FAB8889846A628992958A6F6B789488858D8E7C768B878B878A8F",
                    "94008435ABFE9BD2A578B4BC8E87AF9DA2A088A7939E919194A29793978D9C8E9198949796919195",
                    "9FB993007FFFF976C9826B9894FD5DEF8196CA679BE47D7ECD88B171B8C183948EA58779AEC57BB0",
                    "AED80055FFBBABDFB871A9C191B4BCB1AEA3A9B2B4B8AFBBA99EAFB1AAB9AFAFADA3ACAFAFB2AEB3",
                    "9BA747FF001CBF426D279582A7AECD9FB4536D768484869595B6BA9682B6B3A4A9C0B79BCAA79385",
                    "6A00FE306D753F67535A6B4166703D5967555E3E66653F5A6B4F6344675B455F675B6368797F597E",
                    "78FFA7BC6100444141B7AE3E7F85328DA1607F835C747B736E7F9D72626D64858D75837166787D80",
                    "89B0EBF25F3C241CC2C9FF566BA4E154D0940056BDA411ADF6BC7A4AEA8059644DA17D85AFB1887D",
                    "DCDB00BA62EBE8F4FFECDABEEAEBD5DFD5D0E3D8D8E7CDDADFDFE6D4DED9D8E2DDDDDBD6D8E0DADF",
                    "7738FFCDCE0020552C8754877B745F6744725B5481708D838F9E807F86778A6F8E77737D737C7272",
                    "9BBB52FF2400236C13C684B7CC8750CFAA99BBB56F88C37DA4C6A46DC79074ABA889A4AC8592979D",
                    "95FF00D346F7446C8C4AA4676556797486706C7876A37B80748C9A8D8787959CA19C8CA391A399A2",
                    "494B76FFC307797790003B55723B4F223E52522D5C4742364E58513749533F375056433E48534C45",
                    "A6FF7E0069E1B5B4A5CC7DA59B96BFAFA297A49EBD9DA1B39FA1B2A7A1A8A0AEAAA0ABA69DA2AAAF",
                    "B47FDFFF00B03CD09DB6A382B8C0CEB39EB1B2A6BEC2B9BDACA9AAADC7C1ADAFB8B4B4B4B7BDB7AD",
                    "79A3FF370080659F85439794756C689483707A70767D7B82787780766D757B817375837B7578757B",
                    "B85500FF84FC8D85D0B0D9C8C39DBDC4B3E295C4C0B4DA9BBCB9B4C9A5C4B3B7C7A7C1B9B6BFB1B6",
                    "76FF011300636D9473359684798A8B74797A837572616F846E627B777B76708383737375797C7771",
                    "A79C00DD7A1165FF85A3A19969E3949EACA6BF96B5B38F9DBCAF9997B5B1A1A6A2A1AAA8ABB19EA5",
                    "98C2BF00A1D99E6BFFBD767893C1928C93C17B989A9F8B7BAB957789A8A9858791B08CA391AF858E",
                    "A78F00931FE67F9EC15393FF605CE4C694AEA6B9B1A2B0B0B19F82B8B99D9EA9AD9EA0A2A0AC9BA1",
                    "8AFF0059761C1FAAEFEBCB68BAADDF4F66A04B41DAD39658729A755E9CB79F8FA49879799289916C",
                    "D6DECCD700CDDDD9FCD0EED9FFD1CEB6DFD4CBD4D2DAD1D1D1DEC8C8D5D4DAD8DADDC9CBC5DECAE2",
                    "6F1B0082676FFFA7A7628654546387787662565F6478837866615D74707481706F6A696E6E717771",
                    "8F00772B9CFF9BD7AD6AABAD8E7CA79C999F7C9F8A998E8C8E9897899385978D89918D90908E8A8E",
                    "AADD800077F0FF7ADAB875B29FFB72E58C92D47AB1ED9685D898B587BBD38AAC9CAE9587B4C586B2",
                    "AEDD004CFFC0AAE1BC71A4C794AFBDB3ACA4A9B1B3BBB0BDAA9EADB3AAB9B2B0ADA6ADAEB1B3AFB5",
                    "98B23DFF0017C341641A817D98ABCBA7BB655B7471816C8D78A9B0A16AA3A8A294BABB9CC0C99EA2",
                    "7E00FF53659E238D4A735A646390357C667358646B862F846169596D637536816361658273955895",
                    "88FFCBD069005A5645C8D64A86983C93BD758B946B7D90857A83BC896F7A738D9E86958A72808A94",
                    "8CA8FFD5857E2A3F95D3EC3C83ABA67FBE9E3559B7AD0086C2A7905ED5B9877246A3696B90B58E8A",
                    "DEE400BD5FE7E5F4FFEFE0BEECEFDBE1D9D1E0DFDAE8D2D9DEDDE9D8E3DDD7E3DEE1DFDADBDFDBDF",
                    "7635FFD3EA00174F1E894B7C75785D6E3E6E5848716179777E9E877A837284758485667E6578686B",
                    "94BD52FE12001F6A15BE78A3C37151C49090C0A2678AB86AA0BF9270B38474B1A088A4A5828E9A95",
                    "92FF00C544F35B6B975F9772725A6A7D8C726A796A9A7381717B918D7E7B888C939A8498879C8E98",
                    "4E3D6AFFD90089799C1E3B478E3F47364347573D554B464446575C49435B4D41495C4F474653574D"
                }.Select(GetBytes).ToArray();

                    for (var i = 0; i < hashes.Length; i++)
                    {
                        for (var j = i + 1; j < hashes.Length; j++)
                        {
                            var clrResult = ImagePhash.GetCrossCorrelation(hashes[i], hashes[j]);
                            var dbResult = db.Database.SqlQuery<double>("SELECT " + FUNC + "({0}, {1})", hashes[i], hashes[j]).First();
                            Console.WriteLine($"[{i}, {j}]: {clrResult:0.0000} - {dbResult:0.0000}");

                            Assert.InRange(dbResult, clrResult - 0.01, clrResult + 0.01);
                        }
                    }
                }
                finally
                {
                    db.Database.ExecuteSqlCommand(SqlFunctionFactory.GetDropIfExistsFunctionSql(FUNC));
                }
            }
        }

        private static byte[] GetBytes(string hash) => Enumerable.Range(0, 40).Select(i => byte.Parse(hash.Substring(i * 2, 2), System.Globalization.NumberStyles.HexNumber)).ToArray();
    }
}